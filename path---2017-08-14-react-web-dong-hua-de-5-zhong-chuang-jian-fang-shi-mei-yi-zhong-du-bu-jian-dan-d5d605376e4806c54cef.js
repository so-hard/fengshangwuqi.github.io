webpackJsonp([0xaedf7e56e67d],{762:function(n,s){n.exports={data:{site:{siteMetadata:{siteUrl:"https://fengshangwuqi.github.io"}},markdownRemark:{html:'<div class="original-info">\n  <div className="original-address">\n    原文地址：\n    <a\n      href="https://medium.com/react-native-training/react-animations-in-depth-433e2b3f0e8e"\n      target="_blank"\n      rel="noopener noreferrer"\n    >\n      React Animations in Depth\n    </a>\n  </div>\n  <div className="original-auth">作者：Nader Dabit</div>\n</div>\n<blockquote>\n<p>在 <a href="http://t.cn/RQVluB2" target="_blank" rel="noopener noreferrer">Tweet</a> 得到很多大佬关于 <strong>React Web 动画</strong> 不错的的回应，于是决定在这里分享给大家。</p>\n</blockquote>\n<p>以下便是本文要分享的创建 <strong>React 动画</strong> 的几种方式：</p>\n<ul>\n<li>CSS animation</li>\n<li>JS Style</li>\n<li><a href="http://t.cn/RLeuFGX" target="_blank" rel="noopener noreferrer">React Motion</a></li>\n<li><a href="http://t.cn/R9d015g" target="_blank" rel="noopener noreferrer">Animated</a></li>\n<li><a href="http://t.cn/R9dOzS1" target="_blank" rel="noopener noreferrer">Velocity React</a></li>\n</ul>\n<h2 id="css-animation"><a href="#css-animation" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CSS animation</h2>\n<p>给元素添加 <strong>class</strong> 是最简单，最常见的书写方式，如果你的 app 正在使用 CSS，那么这将是你最愉快的选择。</p>\n<p>赞同者：</p>\n<ul>\n<li>我们只需修改 <strong>opacity</strong> 和 <strong>transform</strong> 这样的属性，就可构建基本的动画；</li>\n<li>在组件中，我们可以非常容易地通过 <strong>state</strong> 去更新这些值；</li>\n</ul>\n<p>反对者：</p>\n<ul>\n<li>这种方式并 <strong>不跨平台</strong>，在 React Native 中就不适用；</li>\n<li>对于较复杂的动画，这种方式难以控制；</li>\n</ul>\n<p>接下来，我们通过一个简单的 demo 来体验一下这种创建方式：当 input focus 的时候，我们增加它的宽度。</p>\n<p>首先，我们创建两个 input 要用到的 class：</p>\n<div class="gatsby-highlight">\n      <pre class="language-css"><code class="language-css"><span class="token selector">.input</span> <span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>\n  <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>\n  <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>\n  <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>\n  <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> #dddddd<span class="token punctuation">;</span>\n  <span class="token property">transition</span><span class="token punctuation">:</span> width .35s linear<span class="token punctuation">;</span>\n  <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.input-focused</span> <span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 240px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>一个是它原始的样式，一个是它 focus 后的样式。</p>\n<p>下面，我们就开始书写我们的 React 组件。</p>\n<p><img src="/css-animation-34e12b363e28584285837b5b9fbaca03.gif" alt="animation"></p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    focused<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'focus\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>focus<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'blur\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>focus<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function-variable function">focus</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>prevState <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n      focused<span class="token punctuation">:</span> <span class="token operator">!</span>prevState<span class="token punctuation">.</span>focused<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>\n          <span class="token operator">&lt;</span>input\n            ref<span class="token operator">=</span><span class="token punctuation">{</span>input <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>_input <span class="token operator">=</span> input<span class="token punctuation">}</span>\n            className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">\'input\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>focused <span class="token operator">&amp;&amp;</span> <span class="token string">\'input-focused\'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n          <span class="token operator">/</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<ul>\n<li>我们有一个 focused 的 state，初始值为 false，我们通过更新该值来创建我们的动画；</li>\n<li>在 componentDidMount 时，我们添加两个监听器，一个 focus，一个 blur，指定的回调函数都是 focus；</li>\n<li>focus 方法会获取之前 focused 的值，并负责切换该值；</li>\n<li>在 render 中，我们通过 state 来改变 input 的 classNames，从而实现我们的动画；</li>\n</ul>\n<h2 id="js-style"><a href="#js-style" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>JS Style</h2>\n<p>JavaScipt styles 跟 CSS 中的 class 类似。</p>\n<p>赞同者:</p>\n<ul>\n<li>跟 CSS 动画一样，且它的表现更为清晰，且可以不必依赖 CSS；</li>\n</ul>\n<p>反对者：</p>\n<ul>\n<li>跟 CSS 动画一样，<strong>不跨平台</strong>，且动画一旦复杂，也难以控制；</li>\n</ul>\n<p>在下面的 demo 中，我们将创建一个 input，当用户输入时，我们将一个 button 从 disable 转变为 enable。</p>\n<p><img src="/js-style-204b6a2d062a79cb40464757c4080aec.gif" alt="style"></p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    disabled<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function-variable function">onChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> length <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> disabled<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> disabled<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> disabled <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> label <span class="token operator">=</span> disabled <span class="token operator">?</span> <span class="token string">\'Disabled\'</span> <span class="token punctuation">:</span> <span class="token string">\'Submit\'</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>App<span class="token punctuation">}</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>input\n          style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>input<span class="token punctuation">}</span>\n          onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onChange<span class="token punctuation">}</span>\n        <span class="token operator">/</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>button\n          style<span class="token operator">=</span><span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n            styles<span class="token punctuation">.</span>button<span class="token punctuation">,</span>\n            <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>disabled <span class="token operator">&amp;&amp;</span> styles<span class="token punctuation">.</span>buttonEnabled\n          <span class="token punctuation">)</span><span class="token punctuation">}</span>\n          disabled<span class="token operator">=</span><span class="token punctuation">{</span>disabled<span class="token punctuation">}</span>\n        <span class="token operator">></span>\n          <span class="token punctuation">{</span>label<span class="token punctuation">}</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span>\n  App<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    display<span class="token punctuation">:</span> <span class="token string">\'flex\'</span><span class="token punctuation">,</span>\n    justifyContent<span class="token punctuation">:</span> <span class="token string">\'left\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  input<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    marginRight<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n    padding<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n    width<span class="token punctuation">:</span> <span class="token number">190</span><span class="token punctuation">,</span>\n    fontSize<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>\n    border<span class="token punctuation">:</span> <span class="token string">\'none\'</span><span class="token punctuation">,</span>\n    backgroundColor<span class="token punctuation">:</span> <span class="token string">\'#ddd\'</span><span class="token punctuation">,</span>\n    outline<span class="token punctuation">:</span> <span class="token string">\'none\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  button<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    width<span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">,</span>\n    height<span class="token punctuation">:</span> <span class="token number">43</span><span class="token punctuation">,</span>\n    fontSize<span class="token punctuation">:</span> <span class="token number">17</span><span class="token punctuation">,</span>\n    border<span class="token punctuation">:</span> <span class="token string">\'none\'</span><span class="token punctuation">,</span>\n    borderRadius<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n    transition<span class="token punctuation">:</span> <span class="token string">\'.25s all\'</span><span class="token punctuation">,</span>\n    cursor<span class="token punctuation">:</span> <span class="token string">\'pointer\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  buttonEnabled<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    width<span class="token punctuation">:</span> <span class="token number">120</span><span class="token punctuation">,</span>\n    backgroundColor<span class="token punctuation">:</span> <span class="token string">\'#ffc107\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<ul>\n<li>我们有一个 disabled 的 state，初始值为 true；</li>\n<li>onChange 方法会获取用户的输入，当输入非空时，就切换 disabled 的值；</li>\n<li>根据 disabled 的值，确定是否将 buttonEnabled 添加到 button 中；</li>\n</ul>\n<h2 id="react-motion"><a href="#react-motion" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React Motion</h2>\n<p>React Motion 是 <a href="https://medium.com/@chenglou" target="_blank" rel="noopener noreferrer">Cheng Lou</a> 书写的一个非常不错的开源项目。它的思想是可以对 <strong>Motion</strong> 组件进行简单的样式设置，然后你就可以在回调函数中通过这些值，享受动画带来的乐趣。</p>\n<p>对于绝大多数的动画组件，我们往往不希望对动画属性（宽高、颜色等）的变化时间做硬编码处理，<strong>react-motion</strong> 提供的 <strong>spring</strong> 函数就是用来解决这一需求的，它可以逼真地模仿真实的物理效果，也就是我们常见的各类 <strong>缓动效果</strong>。</p>\n<p>下面是一个简单的 demo：</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Motion style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token function">spring</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>\n  <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span><span class="token punctuation">{</span> x <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n      <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> transform<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`translateX(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px)`</span></span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>Motion<span class="token operator">></span></code></pre>\n      </div>\n<p>这是官方提供的几个 demo，可谓是不看不知道，一看吓一跳。</p>\n<ul>\n<li><a href="http://t.cn/R9epBQV" target="_blank" rel="noopener noreferrer">Chat Heads</a></li>\n<li><a href="http://t.cn/R9eprR8" target="_blank" rel="noopener noreferrer">Draggable Balls</a></li>\n<li><a href="http://t.cn/R9epdOH" target="_blank" rel="noopener noreferrer">TodoMVC List Transition</a></li>\n<li><a href="http://t.cn/R9epgoj" target="_blank" rel="noopener noreferrer">Water Ripples</a></li>\n<li><a href="http://t.cn/R9epe9u" target="_blank" rel="noopener noreferrer">Draggable List</a></li>\n</ul>\n<p>赞同者：</p>\n<ul>\n<li>React Motion 可以在 React Web 中使用，也可以在 React Native 中使用，因为它 <strong>跨平台</strong>；</li>\n<li>其中的 <strong>spring</strong> 概念最开始对我来说很陌生，然而上手之后，发现它真的很神奇，并且，它有很详细的 API；</li>\n</ul>\n<p>反对者：</p>\n<ul>\n<li>在某些情况下，他不如纯 CSS / JS 动画；</li>\n<li>虽然它有不错的 API，容易上手，但也需要学习成本；</li>\n</ul>\n<p>首先使用 yarn 或 npm 安装：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">$ yarn add react-motion</code></pre>\n      </div>\n<p>在下面的 demo 中，我们将创建一个 dropdown 菜单，当点击按钮时，下拉菜单友好展开。</p>\n<p><img src="/react-motion-e49f3a4bf698d2c8ad341252be5fd4d6.gif" alt="motion"></p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Motion<span class="token punctuation">,</span> spring <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-motion\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    height<span class="token punctuation">:</span> <span class="token number">38</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function-variable function">animate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> height<span class="token punctuation">:</span> state<span class="token punctuation">.</span>height <span class="token operator">===</span> <span class="token number">233</span> <span class="token operator">?</span> <span class="token number">38</span> <span class="token punctuation">:</span> <span class="token number">233</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>button<span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>animate<span class="token punctuation">}</span><span class="token operator">></span>Animate<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n        <span class="token operator">&lt;</span>Motion\n          style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> height<span class="token punctuation">:</span> <span class="token function">spring</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n        <span class="token operator">></span>\n          <span class="token punctuation">{</span>\n            <span class="token punctuation">(</span><span class="token punctuation">{</span> height <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n            <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> styles<span class="token punctuation">.</span>menu<span class="token punctuation">,</span> <span class="token punctuation">{</span> height <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>\n              <span class="token operator">&lt;</span>p style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>selection<span class="token punctuation">}</span><span class="token operator">></span>Selection <span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>\n              <span class="token operator">&lt;</span>p style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>selection<span class="token punctuation">}</span><span class="token operator">></span>Selection <span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>\n              <span class="token operator">&lt;</span>p style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>selection<span class="token punctuation">}</span><span class="token operator">></span>Selection <span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>\n              <span class="token operator">&lt;</span>p style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>selection<span class="token punctuation">}</span><span class="token operator">></span>Selection <span class="token number">4</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>\n              <span class="token operator">&lt;</span>p style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>selection<span class="token punctuation">}</span><span class="token operator">></span>Selection <span class="token number">5</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>\n              <span class="token operator">&lt;</span>p style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>selection<span class="token punctuation">}</span><span class="token operator">></span>Selection <span class="token number">6</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>\n            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n          <span class="token punctuation">}</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>Motion<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span>\n  menu<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    marginTop<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>\n    width<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>\n    border<span class="token punctuation">:</span> <span class="token string">\'2px solid #ddd\'</span><span class="token punctuation">,</span>\n    overflow<span class="token punctuation">:</span> <span class="token string">\'hidden\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  button<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    display<span class="token punctuation">:</span> <span class="token string">\'flex\'</span><span class="token punctuation">,</span>\n    width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n    height<span class="token punctuation">:</span> <span class="token number">45</span><span class="token punctuation">,</span>\n    justifyContent<span class="token punctuation">:</span> <span class="token string">\'center\'</span><span class="token punctuation">,</span>\n    alignItems<span class="token punctuation">:</span> <span class="token string">\'center\'</span><span class="token punctuation">,</span>\n    border<span class="token punctuation">:</span> <span class="token string">\'none\'</span><span class="token punctuation">,</span>\n    borderRadius<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n    backgroundColor<span class="token punctuation">:</span> <span class="token string">\'#ffc107\'</span><span class="token punctuation">,</span>\n    cursor<span class="token punctuation">:</span> <span class="token string">\'pointer\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  selection<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    margin<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    padding<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n    borderBottom<span class="token punctuation">:</span> <span class="token string">\'1px solid #ededed\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<ul>\n<li>我们从 react-motion 中 import <strong>Motion</strong> 和 <strong>spring</strong>；</li>\n<li>我们有一个 height 的 state，初始值为 38，代表 menu 的高度；</li>\n<li>animate 方法设置 menu 的 height，切换 height 的值；</li>\n<li>在 render 中，我们使用 Motion 组件包装整个 p 标签列表，将 state.height 的当前值设为组件的 height，然后在组件的回调函数中使用该值作为整个下拉的高度；</li>\n<li>当按钮被点击时，我们通过 this.animate 切换下拉的高度；</li>\n</ul>\n<h2 id="animated"><a href="#animated" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Animated</h2>\n<p>Animated 是基于 React Native 使用的同一个动画库建立起来的。</p>\n<p>它背后的思想是创建 <strong>声明式动画</strong>，通过传递配置对象来控制动画。</p>\n<p>赞同者：</p>\n<ul>\n<li><strong>跨平台</strong>，它在 React Native 中已经非常稳定，如果你在 React Native 中使用过，那么你将不用再重复学习；</li>\n<li>其中的 <strong>interpolate</strong> 是一个神奇的插值函数，我们将在下面看到；</li>\n</ul>\n<p>反对者：</p>\n<ul>\n<li>目前不是 100% 的稳定，在老的浏览器中的，存在前缀和性能的问题；</li>\n</ul>\n<p>首先使用 yarn 或 npm 安装：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$ yarn add animated</code></pre>\n      </div>\n<p>在下面的 demo 中，我们将模拟在提交表单成功后显示的动画 message。</p>\n<p><img src="/Animated-bfcec915be7c2143a50deaeaa3edd1f0.gif" alt="animated"></p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Animated <span class="token keyword">from</span> <span class="token string">\'animated/lib/targets/react-dom\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Easing <span class="token keyword">from</span> <span class="token string">\'animated/lib/Easing\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">AnimatedApp</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  animatedValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animated<span class="token punctuation">.</span>Value</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function-variable function">animate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>animatedValue<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    Animated<span class="token punctuation">.</span><span class="token function">timing</span><span class="token punctuation">(</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>animatedValue<span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        toValue<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n        duration<span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>\n        easing<span class="token punctuation">:</span> Easing<span class="token punctuation">.</span><span class="token function">elastic</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> marginLeft <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>animatedValue<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      inputRange<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      outputRange<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>\n          <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>button<span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>animate<span class="token punctuation">}</span><span class="token operator">></span>Animate<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n          <span class="token operator">&lt;</span>Animated<span class="token punctuation">.</span>div\n            style<span class="token operator">=</span><span class="token punctuation">{</span>\n              Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>\n                <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n                styles<span class="token punctuation">.</span>box<span class="token punctuation">,</span>\n                <span class="token punctuation">{</span> opacity<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>animatedValue<span class="token punctuation">,</span> marginLeft <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n          <span class="token operator">></span>\n            <span class="token operator">&lt;</span>p<span class="token operator">></span>Thanks <span class="token keyword">for</span> your submission<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>\n          <span class="token operator">&lt;</span><span class="token operator">/</span>Animated<span class="token punctuation">.</span>div<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span>\n  button<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    display<span class="token punctuation">:</span> <span class="token string">\'flex\'</span><span class="token punctuation">,</span>\n    width<span class="token punctuation">:</span> <span class="token number">125</span><span class="token punctuation">,</span>\n    height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n    justifyContent<span class="token punctuation">:</span> <span class="token string">\'center\'</span><span class="token punctuation">,</span>\n    alignItems<span class="token punctuation">:</span> <span class="token string">\'center\'</span><span class="token punctuation">,</span>\n    border<span class="token punctuation">:</span> <span class="token string">\'none\'</span><span class="token punctuation">,</span>\n    borderRadius<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n    backgroundColor<span class="token punctuation">:</span> <span class="token string">\'#ffc107\'</span><span class="token punctuation">,</span>\n    cursor<span class="token punctuation">:</span> <span class="token string">\'pointer\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  box<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    display<span class="token punctuation">:</span> <span class="token string">\'inline-block\'</span><span class="token punctuation">,</span>\n    marginTop<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n    padding<span class="token punctuation">:</span> <span class="token string">\'0.6rem 2rem\'</span><span class="token punctuation">,</span>\n    fontSize<span class="token punctuation">:</span><span class="token string">\'0.8rem\'</span><span class="token punctuation">,</span>\n    border<span class="token punctuation">:</span> <span class="token string">\'1px #eee solid\'</span><span class="token punctuation">,</span>\n    borderRadius<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n    boxShadow<span class="token punctuation">:</span> <span class="token string">\'0 2px 8px rgba(0,0,0,.2)\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<ul>\n<li>从 animated 中 import <strong>Animated</strong> 和 <strong>Easing</strong>；</li>\n<li>用 <strong>new Animated.Value(0)</strong> 创建一个值为 0 的类属性 - animatedValue；</li>\n<li>创建 animate 方法，处理所有的动画，首先通过 <strong>this.animatedValue.setValue(0)</strong> 初始化动画值，实现的效果就是每次重新执行该动画，然后调用 <strong>Animated.timing</strong>，<strong>animatedValue</strong> 作为第一个参数传递，配置对象作为第二个参数，一个设置最终动画值，一个设置持续时间，一个设置 <strong>缓动效果</strong>。</li>\n<li>在 render 中，我们用 <strong>interpolate</strong> 方法创建 marginLeft 对象，包含 <strong>inputRange</strong> 和 <strong>outputRange</strong> 数组，我们使用此对象作为 UI 中 message 的 style 属性；</li>\n<li>我们使用 <strong>Animated.div</strong> 替代默认的 div；</li>\n<li>我们将 animatedValue 和 marginLeft 作为 Animated.div 的 style 属性；</li>\n</ul>\n<h2 id="velocity-react"><a href="#velocity-react" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Velocity React</h2>\n<p>Velocity React 是基于已经存在的 <strong>Velocity</strong> 建立起来的。</p>\n<p>赞同者：</p>\n<ul>\n<li>上手容易，API 简单明了，相对其他库更易于掌握；</li>\n</ul>\n<p>反对者：</p>\n<ul>\n<li>有些不得不克服的问题，比如 componentDidMount 后动画并没有真正地起作用等；</li>\n<li>不跨平台；</li>\n</ul>\n<p>下面是一个简单的 demo：</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>VelocityComponent\n  animation<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> opacity<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>showSubComponent <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>      \n  duration<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">500</span><span class="token punctuation">}</span>\n<span class="token operator">></span>\n  <span class="token operator">&lt;</span>MySubComponent<span class="token operator">/</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>VelocityComponent<span class="token operator">></span></code></pre>\n      </div>\n<p>首先还是先用 yarn 或 npm 安装：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">$ yarn add velocity-react</code></pre>\n      </div>\n<p>在下面的 demo 中，我们将创建一个很酷的动画输入。</p>\n<p><img src="/Velocity-React-15dcf4b0275a48bd9eb19f73a58132a8.gif" alt="Velocity"></p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> VelocityComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'velocity-react\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">VelocityLetter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> letter <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>VelocityComponent\n    runOnMount\n    animation<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> opacity<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> marginTop<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n    duration<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">500</span><span class="token punctuation">}</span>\n  <span class="token operator">></span>\n    <span class="token operator">&lt;</span>p style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>letter<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>letter<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>VelocityComponent<span class="token operator">></span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">class</span> <span class="token class-name">VelocityApp</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    letters<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function-variable function">onChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> letters <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    letters<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>VelocityLetter letter<span class="token operator">=</span><span class="token punctuation">{</span>l<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> letters<span class="token punctuation">:</span> arr <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>\n          <span class="token operator">&lt;</span>input onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onChange<span class="token punctuation">}</span> style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>input<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n          <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>letters<span class="token punctuation">}</span><span class="token operator">></span>\n            <span class="token punctuation">{</span>\n              <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>letters\n            <span class="token punctuation">}</span>\n          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span>\n  input<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    marginBottom<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>\n    padding<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span>\n    width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n    height<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span>\n    fontSize<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span>\n    backgroundColor<span class="token punctuation">:</span> <span class="token string">\'#ddd\'</span><span class="token punctuation">,</span>\n    border<span class="token punctuation">:</span> <span class="token string">\'none\'</span><span class="token punctuation">,</span>\n    outline<span class="token punctuation">:</span> <span class="token string">\'none\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  letters<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    display<span class="token punctuation">:</span> <span class="token string">\'flex\'</span><span class="token punctuation">,</span>\n    height<span class="token punctuation">:</span> <span class="token number">140</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  letter<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    marginTop<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n    fontSize<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span>\n    whiteSpace<span class="token punctuation">:</span> <span class="token string">\'pre\'</span><span class="token punctuation">,</span>\n    opacity<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<ul>\n<li>从 velocity-react 中 import <strong>VelocityComponent</strong>；</li>\n<li>我们要创建一个可重复使用的组件来满足每个 letter 的动画；</li>\n<li>在这个组件中，我们将 animation 的 opacity 设为 1，marginTop 设为 0，这些值代表着传入子组件的重写值，即当组件被创建时，组件的 opacity 会由初始的 0 变为 1，marginTop 会由初始的 100 变为 0，我们还设置了 500 ms 的持续时间，最后值得一提的是 <strong>runOnMount</strong> 属性，它的意思是在组件挂载或创建完后执行该动画；</li>\n<li>其中的 onChange 方法会获取用户的每次输入，并创建一个由 <strong>VelocityLetter</strong> 组成的新数组；</li>\n<li>在 render 中，我们就使用该数组在 UI 中渲染 letters；</li>\n</ul>\n<h2 id="总结"><a href="#%E6%80%BB%E7%BB%93" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>总结</h2>\n<p>总的来说，基本的动画，我会选择 JS style，复杂的动画，我更偏向 React Motion，而对于 React Native，我还是坚持使用 Animated，一旦 Animated 成熟，在 Web 中可能也会投入使用，目前，我很享受 React Motion。</p>',
fields:{slug:"/2017-08-14-react-web-dong-hua-de-5-zhong-chuang-jian-fang-shi-mei-yi-zhong-du-bu-jian-dan/"},internal:{content:"---\ntitle: React Web 动画的 5 种创建方式，每一种都不简单\noriginal: false\ntag: FrontEnd,React,Animation\ndate: 2017-08-14T14:46:24+08:00\n---\n\n<div class=\"original-info\">\n  <div className=\"original-address\">\n    原文地址：\n    <a\n      href=\"https://medium.com/react-native-training/react-animations-in-depth-433e2b3f0e8e\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      React Animations in Depth\n    </a>\n  </div>\n  <div className=\"original-auth\">作者：Nader Dabit</div>\n</div>\n\n> 在 [Tweet](http://t.cn/RQVluB2) 得到很多大佬关于 **React Web 动画** 不错的的回应，于是决定在这里分享给大家。\n\n以下便是本文要分享的创建 **React 动画** 的几种方式：\n- CSS animation\n- JS Style\n- [React Motion](http://t.cn/RLeuFGX)\n- [Animated](http://t.cn/R9d015g)\n- [Velocity React](http://t.cn/R9dOzS1)\n\n## CSS animation\n\n给元素添加 **class** 是最简单，最常见的书写方式，如果你的 app 正在使用 CSS，那么这将是你最愉快的选择。\n\n赞同者：\n\n- 我们只需修改 **opacity** 和 **transform** 这样的属性，就可构建基本的动画；\n- 在组件中，我们可以非常容易地通过 **state** 去更新这些值；\n\n反对者：\n\n- 这种方式并 **不跨平台**，在 React Native 中就不适用；\n- 对于较复杂的动画，这种方式难以控制；\n\n接下来，我们通过一个简单的 demo 来体验一下这种创建方式：当 input focus 的时候，我们增加它的宽度。\n\n首先，我们创建两个 input 要用到的 class：\n\n```css\n.input {\n  width: 150px;\n  padding: 10px;\n  font-size: 20px;\n  border: none;\n  border-radius: 4px;\n  background-color: #dddddd;\n  transition: width .35s linear;\n  outline: none;\n}\n\n.input-focused {\n  width: 240px;\n}\n```\n\n一个是它原始的样式，一个是它 focus 后的样式。\n\n下面，我们就开始书写我们的 React 组件。\n\n![animation](./images/css-animation.gif)\n\n```javascript\nclass App extends Component {\n  state = {\n    focused: false,\n  }\n\n  componentDidMount() {\n    this._input.addEventListener('focus', this.focus);\n    this._input.addEventListener('blur', this.focus);\n  }\n\n  focus = () => {\n    this.setState(prevState => ({\n      focused: !prevState.focused,\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <input\n            ref={input => this._input = input}\n            className={['input', this.state.focused && 'input-focused'].join(' ')}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n```\n\n- 我们有一个 focused 的 state，初始值为 false，我们通过更新该值来创建我们的动画；\n- 在 componentDidMount 时，我们添加两个监听器，一个 focus，一个 blur，指定的回调函数都是 focus；\n- focus 方法会获取之前 focused 的值，并负责切换该值；\n- 在 render 中，我们通过 state 来改变 input 的 classNames，从而实现我们的动画；\n\n## JS Style\n\nJavaScipt styles 跟 CSS 中的 class 类似。\n\n赞同者:\n\n- 跟 CSS 动画一样，且它的表现更为清晰，且可以不必依赖 CSS；\n\n反对者：\n\n- 跟 CSS 动画一样，**不跨平台**，且动画一旦复杂，也难以控制；\n\n在下面的 demo 中，我们将创建一个 input，当用户输入时，我们将一个 button 从 disable 转变为 enable。\n\n![style](./images/js-style.gif)\n\n```javascript\nclass App extends Component {\n  state = {\n    disabled: true,\n  }\n\n  onChange = (e) => {\n    const length = e.target.value.length;\n\n    if (length > 0) {\n      this.setState({ disabled: false });\n    } else {\n      this.setState({ disabled: true });\n    }\n  }\n  render() {\n    const { disabled } = this.state;\n    const label = disabled ? 'Disabled' : 'Submit';\n\n    return (\n      <div style={styles.App}>\n        <input\n          style={styles.input}\n          onChange={this.onChange}\n        />\n        <button\n          style={Object.assign({},\n            styles.button,\n            !this.state.disabled && styles.buttonEnabled\n          )}\n          disabled={disabled}\n        >\n          {label}\n        </button>\n      </div>\n    );\n  }\n}\n\n\nconst styles = {\n  App: {\n    display: 'flex',\n    justifyContent: 'left',\n  },\n  input: {\n    marginRight: 10,\n    padding: 10,\n    width: 190,\n    fontSize: 20,\n    border: 'none',\n    backgroundColor: '#ddd',\n    outline: 'none',\n  },\n  button: {\n    width: 90,\n    height: 43,\n    fontSize: 17,\n    border: 'none',\n    borderRadius: 4,\n    transition: '.25s all',\n    cursor: 'pointer',\n  },\n  buttonEnabled: {\n    width: 120,\n    backgroundColor: '#ffc107',\n  }\n}\n```\n\n- 我们有一个 disabled 的 state，初始值为 true；\n- onChange 方法会获取用户的输入，当输入非空时，就切换 disabled 的值；\n- 根据 disabled 的值，确定是否将 buttonEnabled 添加到 button 中；\n\n## React Motion\n\nReact Motion 是 [Cheng Lou](https://medium.com/@chenglou) 书写的一个非常不错的开源项目。它的思想是可以对 **Motion** 组件进行简单的样式设置，然后你就可以在回调函数中通过这些值，享受动画带来的乐趣。\n\n对于绝大多数的动画组件，我们往往不希望对动画属性（宽高、颜色等）的变化时间做硬编码处理，**react-motion** 提供的 **spring** 函数就是用来解决这一需求的，它可以逼真地模仿真实的物理效果，也就是我们常见的各类 **缓动效果**。\n\n下面是一个简单的 demo：\n\n```javascript\n<Motion style={{ x: spring(this.state.x) }}>\n  {\n    ({ x }) =>\n      <div style={{ transform: `translateX(${x}px)` }} />\n  }\n</Motion>\n```\n\n这是官方提供的几个 demo，可谓是不看不知道，一看吓一跳。\n\n- [Chat Heads](http://t.cn/R9epBQV)\n- [Draggable Balls](http://t.cn/R9eprR8)\n- [TodoMVC List Transition](http://t.cn/R9epdOH)\n- [Water Ripples](http://t.cn/R9epgoj)\n- [Draggable List](http://t.cn/R9epe9u)\n\n赞同者：\n- React Motion 可以在 React Web 中使用，也可以在 React Native 中使用，因为它 **跨平台**；\n- 其中的 **spring** 概念最开始对我来说很陌生，然而上手之后，发现它真的很神奇，并且，它有很详细的 API；\n\n反对者：\n- 在某些情况下，他不如纯 CSS / JS 动画；\n- 虽然它有不错的 API，容易上手，但也需要学习成本；\n\n首先使用 yarn 或 npm 安装：\n```bash\n$ yarn add react-motion\n```\n\n在下面的 demo 中，我们将创建一个 dropdown 菜单，当点击按钮时，下拉菜单友好展开。\n\n![motion](./images/react-motion.gif)\n\n```javascript\nimport { Motion, spring } from 'react-motion';\n\nclass App extends Component {\n  state = {\n    height: 38,\n  }\n\n  animate = () => {\n    this.setState((state) => ({ height: state.height === 233 ? 38 : 233 }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div style={styles.button} onClick={this.animate}>Animate</div>\n        <Motion\n          style={{ height: spring(this.state.height) }}\n        >\n          {\n            ({ height }) =>\n            <div style={Object.assign({}, styles.menu, { height } )}>\n              <p style={styles.selection}>Selection 1</p>\n              <p style={styles.selection}>Selection 2</p>\n              <p style={styles.selection}>Selection 3</p>\n              <p style={styles.selection}>Selection 4</p>\n              <p style={styles.selection}>Selection 5</p>\n              <p style={styles.selection}>Selection 6</p>\n            </div>\n          }\n        </Motion>\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  menu: {\n    marginTop: 20,\n    width: 300,\n    border: '2px solid #ddd',\n    overflow: 'hidden',\n  },\n  button: {\n    display: 'flex',\n    width: 200,\n    height: 45,\n    justifyContent: 'center',\n    alignItems: 'center',\n    border: 'none',\n    borderRadius: 4,\n    backgroundColor: '#ffc107',\n    cursor: 'pointer',\n  },\n  selection: {\n    margin: 0,\n    padding: 10,\n    borderBottom: '1px solid #ededed',\n  },\n}\n```\n\n- 我们从 react-motion 中 import **Motion** 和 **spring**；\n- 我们有一个 height 的 state，初始值为 38，代表 menu 的高度；\n- animate 方法设置 menu 的 height，切换 height 的值；\n- 在 render 中，我们使用 Motion 组件包装整个 p 标签列表，将 state.height 的当前值设为组件的 height，然后在组件的回调函数中使用该值作为整个下拉的高度；\n- 当按钮被点击时，我们通过 this.animate 切换下拉的高度；\n\n## Animated\n\nAnimated 是基于 React Native 使用的同一个动画库建立起来的。\n\n它背后的思想是创建 **声明式动画**，通过传递配置对象来控制动画。\n\n赞同者：\n- **跨平台**，它在 React Native 中已经非常稳定，如果你在 React Native 中使用过，那么你将不用再重复学习；\n- 其中的 **interpolate** 是一个神奇的插值函数，我们将在下面看到；\n\n反对者：\n- 目前不是 100% 的稳定，在老的浏览器中的，存在前缀和性能的问题；\n\n首先使用 yarn 或 npm 安装：\n```\n$ yarn add animated\n```\n\n在下面的 demo 中，我们将模拟在提交表单成功后显示的动画 message。\n\n![animated](./images/Animated.gif)\n\n```javascript\nimport Animated from 'animated/lib/targets/react-dom';\nimport Easing from 'animated/lib/Easing';\n\nclass AnimatedApp extends Component {\n  animatedValue = new Animated.Value(0);\n\n  animate = () => {\n    this.animatedValue.setValue(0);\n\n    Animated.timing(\n      this.animatedValue,\n      {\n        toValue: 1,\n        duration: 1000,\n        easing: Easing.elastic(1),\n      }\n    ).start();\n  }\n\n  render() {\n    const marginLeft = this.animatedValue.interpolate({\n      inputRange: [0, 1],\n      outputRange: [-120, 0],\n    });\n\n    return (\n      <div className=\"App\">\n          <div style={styles.button} onClick={this.animate}>Animate</div>\n          <Animated.div\n            style={\n              Object.assign(\n                {},\n                styles.box,\n                { opacity: this.animatedValue, marginLeft })}\n          >\n            <p>Thanks for your submission!</p>\n          </Animated.div>\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  button: {\n    display: 'flex',\n    width: 125,\n    height: 50,\n    justifyContent: 'center',\n    alignItems: 'center',\n    border: 'none',\n    borderRadius: 4,\n    backgroundColor: '#ffc107',\n    cursor: 'pointer',\n  },\n  box: {\n    display: 'inline-block',\n    marginTop: 10,\n    padding: '0.6rem 2rem',\n    fontSize:'0.8rem',\n    border: '1px #eee solid',\n    borderRadius: 4,\n    boxShadow: '0 2px 8px rgba(0,0,0,.2)',\n  },\n}\n```\n\n- 从 animated 中 import **Animated** 和 **Easing**；\n- 用 **new Animated.Value(0)** 创建一个值为 0 的类属性 - animatedValue；\n- 创建 animate 方法，处理所有的动画，首先通过 **this.animatedValue.setValue(0)** 初始化动画值，实现的效果就是每次重新执行该动画，然后调用 **Animated.timing**，**animatedValue** 作为第一个参数传递，配置对象作为第二个参数，一个设置最终动画值，一个设置持续时间，一个设置 **缓动效果**。\n- 在 render 中，我们用 **interpolate** 方法创建 marginLeft 对象，包含 **inputRange** 和 **outputRange** 数组，我们使用此对象作为 UI 中 message 的 style 属性；\n- 我们使用 **Animated.div** 替代默认的 div；\n- 我们将 animatedValue 和 marginLeft 作为 Animated.div 的 style 属性；\n\n## Velocity React\n\nVelocity React 是基于已经存在的 **Velocity** 建立起来的。\n\n赞同者：\n\n- 上手容易，API 简单明了，相对其他库更易于掌握；\n\n反对者：\n\n- 有些不得不克服的问题，比如 componentDidMount 后动画并没有真正地起作用等；\n- 不跨平台；\n\n下面是一个简单的 demo：\n\n```javascript\n<VelocityComponent\n  animation={{ opacity: this.state.showSubComponent ? 1 : 0 }}      \n  duration={500}\n>\n  <MySubComponent/>\n</VelocityComponent>\n```\n\n首先还是先用 yarn 或 npm 安装：\n\n```bash\n$ yarn add velocity-react\n```\n\n在下面的 demo 中，我们将创建一个很酷的动画输入。\n\n![Velocity](./images/Velocity-React.gif)\n\n```javascript\nimport { VelocityComponent } from 'velocity-react';\n\nconst VelocityLetter = ({ letter }) => (\n  <VelocityComponent\n    runOnMount\n    animation={{ opacity: 1, marginTop: 0 }}\n    duration={500}\n  >\n    <p style={styles.letter}>{letter}</p>\n  </VelocityComponent>\n)\n\nclass VelocityApp extends Component {\n  state = {\n    letters: [],\n  }\n\n  onChange = (e) => {\n    const letters = e.target.value.split('');\n    const arr = [];\n\n    letters.forEach((l, i) => {\n      arr.push(<VelocityLetter letter={l} />)\n    });\n    this.setState({ letters: arr });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <input onChange={this.onChange} style={styles.input} />\n          <div style={styles.letters}>\n            {\n              this.state.letters\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  input: {\n    marginBottom: 20,\n    padding: 8,\n    width: 200,\n    height: 40,\n    fontSize: 22,\n    backgroundColor: '#ddd',\n    border: 'none',\n    outline: 'none',\n  },\n  letters: {\n    display: 'flex',\n    height: 140,\n  },\n  letter: {\n    marginTop: 100,\n    fontSize: 22,\n    whiteSpace: 'pre',\n    opacity: 0,\n  }\n}\n```\n- 从 velocity-react 中 import **VelocityComponent**；\n- 我们要创建一个可重复使用的组件来满足每个 letter 的动画；\n- 在这个组件中，我们将 animation 的 opacity 设为 1，marginTop 设为 0，这些值代表着传入子组件的重写值，即当组件被创建时，组件的 opacity 会由初始的 0 变为 1，marginTop 会由初始的 100 变为 0，我们还设置了 500 ms 的持续时间，最后值得一提的是 **runOnMount** 属性，它的意思是在组件挂载或创建完后执行该动画；\n- 其中的 onChange 方法会获取用户的每次输入，并创建一个由 **VelocityLetter** 组成的新数组；\n- 在 render 中，我们就使用该数组在 UI 中渲染 letters；\n\n## 总结\n\n总的来说，基本的动画，我会选择 JS style，复杂的动画，我更偏向 React Motion，而对于 React Native，我还是坚持使用 Animated，一旦 Animated 成熟，在 Web 中可能也会投入使用，目前，我很享受 React Motion。"},frontmatter:{title:"React Web 动画的 5 种创建方式，每一种都不简单",tag:"FrontEnd,React,Animation",date:"2017-08-14",original:!1}}},pathContext:{slug:"/2017-08-14-react-web-dong-hua-de-5-zhong-chuang-jian-fang-shi-mei-yi-zhong-du-bu-jian-dan/"}}}});